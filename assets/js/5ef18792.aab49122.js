"use strict";(self.webpackChunkoracle=self.webpackChunkoracle||[]).push([[169],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=l,N=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return a?n.createElement(N,i(i({ref:t},m),{},{components:a})):n.createElement(N,i({ref:t},m))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4987:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),i=["components"],o={id:"Section 1. PLSQL",sidebar_position:1,description:"PLSQL"},s=void 0,p={unversionedId:"plsql-tutorial/Section 1. PLSQL",id:"plsql-tutorial/Section 1. PLSQL",title:"Section 1. PLSQL",description:"PLSQL",source:"@site/docs/plsql-tutorial/plsql.md",sourceDirName:"plsql-tutorial",slug:"/plsql-tutorial/Section 1. PLSQL",permalink:"/oracle/plsql-tutorial/Section 1. PLSQL",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"Section 1. PLSQL",sidebar_position:1,description:"PLSQL"},sidebar:"tutorialSidebar",previous:{title:"PL/SQL Tutorial",permalink:"/oracle/category/plsql-tutorial"},next:{title:"Section 2. Conditional control",permalink:"/oracle/plsql-tutorial/Section 2. Conditional control"}},m={},d=[{value:"What is PL/SQL?",id:"what-is-plsql",level:2},{value:"Advantages of PLSQL",id:"advantages-of-plsql",level:2},{value:"PL/SQL Blocks",id:"plsql-blocks",level:2},{value:"Anonymous Block",id:"anonymous-block",level:3},{value:"Named Block",id:"named-block",level:3},{value:"Early vs. Late Binding",id:"early-vs-late-binding",level:2},{value:"PL/SQL data types",id:"plsql-data-types",level:2},{value:"Scacalr data type",id:"scacalr-data-type",level:3},{value:"Numeric data types",id:"numeric-data-types",level:3},{value:"Boolean data type",id:"boolean-data-type",level:3},{value:"Character data types",id:"character-data-types",level:3},{value:"Datetime data types",id:"datetime-data-types",level:3},{value:"Data type synonyms",id:"data-type-synonyms",level:3},{value:"RAW Datatype",id:"raw-datatype",level:3},{value:"CONSTANT, DEFAULT, NOT NULL",id:"constant-default-not-null",level:3},{value:"Host/Bind/Session Variable",id:"hostbindsession-variable",level:2},{value:"Anchored Data type/ Inheriting data type",id:"anchored-data-type-inheriting-data-type",level:2},{value:"Execute Immediate",id:"execute-immediate",level:2},{value:"Single Row Queries",id:"single-row-queries",level:3},{value:"DDL Operations",id:"ddl-operations",level:3},{value:"PL/SQL Block using EXECUTE IMMEDIATE",id:"plsql-block-using-execute-immediate",level:3},{value:"Bind Variable",id:"bind-variable",level:3},{value:"BULK COLLECT INTO with EXECUTE IMMEDIATE",id:"bulk-collect-into-with-execute-immediate",level:3},{value:"UTL_MAIL",id:"utl_mail",level:2},{value:"UTL_FILE",id:"utl_file",level:2},{value:"External tables",id:"external-tables",level:2},{value:"Import data from Excel to Oracle using SQL Developer",id:"import-data-from-excel-to-oracle-using-sql-developer",level:2},{value:"XMLELEMENT",id:"xmlelement",level:2},{value:"SQL Loader",id:"sql-loader",level:2},{value:"Local Screening",id:"local-screening",level:2},{value:"Wrapped",id:"wrapped",level:2},{value:"High Water Mark",id:"high-water-mark",level:2},{value:"DBMS Packages",id:"dbms-packages",level:2},{value:"DBMS_SQL",id:"dbms_sql",level:3},{value:"DBMS_RANDOM",id:"dbms_random",level:2},{value:"Table Clusters",id:"table-clusters",level:2},{value:"NOCOPY",id:"nocopy",level:2}],u={toc:d};function c(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-plsql"},"What is PL/SQL?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Procedural Language/ Standard Query Language."),(0,r.kt)("li",{parentName:"ul"},"It is a procedural server side programming language"),(0,r.kt)("li",{parentName:"ul"},"Used to bridge the gap of SQL being non-procedural."),(0,r.kt)("li",{parentName:"ul"},"Case-insensitive programming language.")),(0,r.kt)("h2",{id:"advantages-of-plsql"},"Advantages of PL\\SQL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tight integration with SQL"),(0,r.kt)("li",{parentName:"ul"},"Business logic can be directly implemented at database level"),(0,r.kt)("li",{parentName:"ul"},"High performance, High productivity"),(0,r.kt)("li",{parentName:"ul"},"Support object oriented programming")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    --Declaration statements\nBEGIN\n    --Executable statements\nEXCEPTION\n    --Exception handling statements\nEND;\n")),(0,r.kt)("h2",{id:"plsql-blocks"},"PL/SQL Blocks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Blocks are basic programming units in PL/SQL programming language")),(0,r.kt)("h3",{id:"anonymous-block"},"Anonymous Block"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"As this block is created without a name, this block does not create any object in the database. Thus, the scope for reusability is zero. It compiles every time you execute.")),(0,r.kt)("h3",{id:"named-block"},"Named Block"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It creates a database object. Complied for one time and stored for reuse.")),(0,r.kt)("h2",{id:"early-vs-late-binding"},"Early vs. Late Binding"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Late binding means code is compiled at execution. Early binding means code is compiled prior to execution.")),(0,r.kt)("h2",{id:"plsql-data-types"},"PL/SQL data types"),(0,r.kt)("p",null,"PL/SQL divides the scalar data types into four families:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number"),(0,r.kt)("li",{parentName:"ul"},"Boolean"),(0,r.kt)("li",{parentName:"ul"},"Character"),(0,r.kt)("li",{parentName:"ul"},"Datetime")),(0,r.kt)("h3",{id:"scacalr-data-type"},"Scacalr data type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A scalar data type may have subtypes."),(0,r.kt)("li",{parentName:"ul"},"A subtype is a data type that is a subset of another data type, which is its base type."),(0,r.kt)("li",{parentName:"ul"},"A subtype further defines a base type by restricting the value or size of the base data type.")),(0,r.kt)("p",null,"Note that PL/SQL scalar data types include SQL data types and its own data type such as Boolean."),(0,r.kt)("h3",{id:"numeric-data-types"},"Numeric data types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The numeric data types represent real numbers, integers, and floating-point numbers. They are stored as ",(0,r.kt)("inlineCode",{parentName:"li"},"NUMBER"),", IEEE floating-point storage types (",(0,r.kt)("inlineCode",{parentName:"li"},"BINARY_FLOAT")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"BINARY_DOUBLE"),"), and PLS_INTEGER."),(0,r.kt)("li",{parentName:"ul"},"The data types ",(0,r.kt)("inlineCode",{parentName:"li"},"NUMBER"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"BINARY_FLOAT"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"BINARY_DOUBLE")," are SQL data types."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"PLS_INTEGER")," datatype is specific to PL/SQL. It represents signed 32 bits integers that range from -2,147,483,648 to 2,147,483,647."),(0,r.kt)("li",{parentName:"ul"},"Because ",(0,r.kt)("inlineCode",{parentName:"li"},"PLS_INTEGER")," datatype uses hardware arithmetic, they are faster than ",(0,r.kt)("inlineCode",{parentName:"li"},"NUMBER")," operations, which uses software arithmetic."),(0,r.kt)("li",{parentName:"ul"},"In addition, ",(0,r.kt)("inlineCode",{parentName:"li"},"PLS_INTEGER")," values require less storage than ",(0,r.kt)("inlineCode",{parentName:"li"},"NUMBER"),". Hence, you should always use ",(0,r.kt)("inlineCode",{parentName:"li"},"PLS_INTEGER")," values for all calculation in its range to increase the efficiency of programs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PLS_INTEGER")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"BINARY_INTEGER")," data types are identical.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PLS_INTEGER")," datatype has the following predefined subtypes:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"PLS_INTEGER subtypes"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NATURAL"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents nonnegative PLS_INTEGER values")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NATURALN"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents nonnegative PLS_INTEGER values with NOT NULL constraint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POSITIVE"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents positive PLS_INTEGER values")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POSITIVEN"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents positive PLS_INTEGER value with NOT NULL constraint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SIGNTYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents three values -1, 0, or 1, which are useful for tri-state logic programming")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SIMPLE_INTEGER"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents PLS_INTEGER values with NOT NULL constraint.")))),(0,r.kt)("h3",{id:"boolean-data-type"},"Boolean data type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," datatype has three data values: ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Boolean values are typically used in control flow structure such as ",(0,r.kt)("inlineCode",{parentName:"p"},"IF-THEN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CASE"),", and loop statements like ",(0,r.kt)("inlineCode",{parentName:"p"},"LOOP"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR LOOP"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"WHILE LOOP"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SQL does not have the ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," data type, therefore, you cannot:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Assign a ",(0,r.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," value to a table column."),(0,r.kt)("li",{parentName:"ul"},"Select the value from a table column into a ",(0,r.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," variable."),(0,r.kt)("li",{parentName:"ul"},"Use a ",(0,r.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," value in a SQL function."),(0,r.kt)("li",{parentName:"ul"},"Use a ",(0,r.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," expression in a SQL statement."),(0,r.kt)("li",{parentName:"ul"},"Use a ",(0,r.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," value in the ",(0,r.kt)("inlineCode",{parentName:"li"},"DBMS_OUTPUT.PUTLINE")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"DBMS_OUTPUT.PUT")," subprograms.")))),(0,r.kt)("h3",{id:"character-data-types"},"Character data types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The character data types represent alphanumeric text. PL/SQL uses the SQL character data types such as ",(0,r.kt)("inlineCode",{parentName:"li"},"CHAR"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"VARCHAR2"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LONG"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"RAW"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"LONG RAW"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ROWID"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"UROWID"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CHAR(n)")," is a fixed-length character type whose length is from 1 to 32,767 bytes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VARCHAR2(n)")," is varying length character data from 1 to 32,767 bytes.")),(0,r.kt)("h3",{id:"datetime-data-types"},"Datetime data types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The datetime data types represent dates, timestamp with or without time zone and intervals."),(0,r.kt)("li",{parentName:"ul"},"PL/SQL datetime data types are ",(0,r.kt)("inlineCode",{parentName:"li"},"DATE"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMP"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMP WITH TIME ZONE"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMP WITH LOCAL TIME ZONE"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL YEAR TO MONTH"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL DAY TO SECOND"),".")),(0,r.kt)("h3",{id:"data-type-synonyms"},"Data type synonyms"),(0,r.kt)("p",null,"Data types have synonyms for compartibility with non-Oracle data sources such as IBM Db2, SQL Server. And it is not a good practice to use data type synonym unless you are accessing a non-Oracle Database."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Synonyms"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NUMBER"),(0,r.kt)("td",{parentName:"tr",align:null},"DEC, DECIMAL, DOUBLE PRECISION, FLOAT, INTEGER, INT, NUMERIC, REAL, SMALLINT")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHAR"),(0,r.kt)("td",{parentName:"tr",align:null},"CHARACTER, STRING")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR2"),(0,r.kt)("td",{parentName:"tr",align:null},"VARCHAR")))),(0,r.kt)("h3",{id:"raw-datatype"},"RAW Datatype"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Oracle PL/SQL, RAW is a data type used to store binary data, or data which is byte oriented (for example, graphics or audio files). One of the most important things to note about RAW data is that it can only be queried or inserted; RAW data cannot be manipulated. RAW data is always returned as a hexadecimal character value")),(0,r.kt)("h3",{id:"constant-default-not-null"},"CONSTANT, DEFAULT, NOT NULL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET SERVEROUTPUT ON;\n\nDECLARE\n    V_PI CONSTANT NUMBER(7,6):=3.14; --Assigning is mandatory\n    V_NAME VARCHAR2(20) DEFAULT 'Unknown'; --Assigning is mandatory\n    V_AGE NUMBER NOT NULL :=50; --Assigning is mandatory\nBEGIN\n    DBMS_OUTPUT.PUT_LINE('v_pi:' ||V_PI);\n    DBMS_OUTPUT.PUT_LINE('v_name:'||V_NAME);\n    DBMS_OUTPUT.PUT_LINE('v_age:'||V_AGE);\nEND;\n")),(0,r.kt)("h2",{id:"hostbindsession-variable"},"Host/Bind/Session Variable"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is a variable of the interface. This variable can be bonded with SQL or PL\\SQL anonymous block. The scope of these variables is till the end of the session. These variables always preceded with a colon (:).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"VARIABLE v_bind1 VARCHAR2(25); --Not PL/SQL statement\n\nDECLARE\nBEGIN\n    :v_bind1 := 'Binding 1';\n    DBMS_OUTPUT.PUT_LINE(:v_bind1);\nEND;\n--Not PL/SQL statements--\nVARIABLE v_bind2 VARCHAR2(25);\nVARIABLE v_bind3 VARCHAR2(25);\nEXECUTE :v_bind2 := 'Binding 2'; --SQL*Plus command\nEXECUTE :v_bind3 := 'Binding 3';\nPRINT :v_bind2;\nPRINT; --Displays all bind variable values in the session\n----\nSET AUTOPRINT ON --To turn on automatic printing of bind variable while assigning\n")),(0,r.kt)("h2",{id:"anchored-data-type-inheriting-data-type"},"Anchored Data type/ Inheriting data type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is used to pick up data type and size from a previously declared object into a new variable. Advantage of this is, when you change the data type or size of the field in the table, it will also affect this variable. So there is less maintenance.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"VNAME EMP.ENAME%TYPE;\nVEMP EMP%ROWTYPE; -- Record datatype variable\n")),(0,r.kt)("h2",{id:"execute-immediate"},"Execute Immediate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using Execute Immediate, we can parse and execute any SQL statement or a PL/SQL block dynamically in Oracle database"),(0,r.kt)("li",{parentName:"ul"},"Use of bind variable: Security against SQL injections and performance enhancement by reducing hard parsing."),(0,r.kt)("li",{parentName:"ul"},"Generally dynamic SQL is slower than static SQL so it should not be used unless absolutely necessary."),(0,r.kt)("li",{parentName:"ul"},"Main advantage of dynamic SQL is that it allows to perform DDL commands that are not supported directly within PL/SQL")),(0,r.kt)("h3",{id:"single-row-queries"},"Single Row Queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    l_sql VARCHAR2(100);\n    l_ename emp.ename%TYPE;\nBEGIN\n    l_sql:='SELECT ename FROM emp WHERE emp_no=1234';\n    EXECUTE IMMEDIATE l_sql INTO l_ename;\nEND;\n")),(0,r.kt)("h3",{id:"ddl-operations"},"DDL Operations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN\n    EXECUTE IMMEDIATE 'TRUNCATE TABLE my_table';\nEND;\n")),(0,r.kt)("h3",{id:"plsql-block-using-execute-immediate"},"PL/SQL Block using EXECUTE IMMEDIATE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    plsql_blk VARCHAR2(400);\nBEGIN\n    plsql_blk := 'DECLARE\n            var_user VARCHAR2(10);\n        BEGIN\n            SELECT user INTO var_user FROM DUAL;\n            DBMS_OUTPUT.PUT_LINE(''User:'' || var_user);\n        END;';\n    EXECUTE IMMEDIATE plsql_blk;\nEND;\n")),(0,r.kt)("h3",{id:"bind-variable"},"Bind Variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    l_sql VARCHAR2(100);\n    l_ename employees.first_name%TYPE;\nBEGIN\n    l_sql := 'SELECT first_name FROM employees WHERE employee_id = :empno and department_id = :deptno'; --:empno is a bind variable\n    EXECUTE IMMEDIATE l_sql INTO l_ename USING 100,90;--passing 100 into empno and 90 into deptno as bind variable\n    DBMS_OUTPUT.PUT_LINE(l_ename);\nEND;\n")),(0,r.kt)("h3",{id:"bulk-collect-into-with-execute-immediate"},"BULK COLLECT INTO with EXECUTE IMMEDIATE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    TYPE nt_Fname IS TABLE OF VARCHAR2(60);\n    fname nt_Fname;\n    sql_qry VARCHAR2(150);\nBEGIN\n    sql_qry := 'SELECT first_name FROM employees';\n    EXECUTE IMMEDIATE sql_qry BULK COLLECT INTO fname;\nEND;\n")),(0,r.kt)("h2",{id:"utl_mail"},"UTL_MAIL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"UTL_MAIL")," package was introduced in Oracle 10g to provide a simple API to allow email to be sent from PL/SQL.")),(0,r.kt)("h2",{id:"utl_file"},"UTL_FILE"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Oracle PL/SQL, ",(0,r.kt)("inlineCode",{parentName:"li"},"UTL_FILE")," is an Oracle supplied package which is used for file operations (read and write) in conjunction with the underlying operating system.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    tc_logfile UTL_FILE.FILE_TYPE;\n    filedir VARCHAR2(10);\n    v_dir VARCHAR2(100);\n    read_line VARCHAR2(200);\nBEGIN\n    filedir := 'E:\\';\n    v_dir := 'CREATE OR REPLACE DIRECTORY TEMP_TEXT as '''|| filedir||'''';\n    EXECUTE IMMEDIATE v_dir;\n    tc_logfile := UTL_FILE.FOPEN('TEMP_TEXT','TestFile.txt','W'); --A to append; W to write; R to read\n    UTL_FILE.PUT_LINE(tc_logfile, 'STARTING..' || SYSTIMESTAMP);\n    UTL_FILE.PUT_LINE(tc_logfile, 'This is a test file');\n\n    IF UTL_FILE.IS_OPEN(tc_logfile) THEN\n        UTL_FILE.FCLOSE(tc_logfile);\n    END IF;\n    tc_logfile := UTL_FILE.FOPEN('TEMP_TEXT','TestFile.txt','R');\n\n    LOOP\n        BEGIN\n            UTL_FILE.GET_LINE(tc_logfile,read_line);\n            DBMS_OUTPUT.PUT_LINE(read_line);\n        EXCEPTION\n            WHEN NO_DATA_FOUND THEN\n            EXIT;\n        END;\n    END LOOP;\n\n    UTL_FILE.FCLOSE(tc_logfile);\nEND;\n")),(0,r.kt)("h2",{id:"external-tables"},"External tables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE OR REPLACE DIRECTORY directory_name AS 'C\\Users'; --Directory object\n\nCREATE TABLE students(name VARCHAR2(20),college VARCHAR2(20), major VARCHAR2(20))\nORGANIZATION EXTERNAL(\n    TYPE ORACLE_LOADER\n    --The ORACLE_LOADER access driver is the default. It can perform only data loads, and the data must come from text datafiles. Loads from external tables to internal tables are done by reading from the external tables' text-only datafiles.\n    --The ORACLE_DATAPUMP access driver can perform both loads and unloads. The data must come from binary dump files. Loads to internal tables from external tables are done by fetching from the binary dump files. Unloads from internal tables to external tables are done by populating the external tables' binary dump files.\n    DEFAULT DIRECTORY directory_name\n    ACCESS PARAMETERS (\n        RECORD DELIMITED BY NEWLINE\n        FIELDS TERMINATED BY ',' --comma separated\n        MISSING FIELD VALUE ARE NULL --if any data is missing, add them as NULL\n            ( name CHAR(20),\n            collage CHAR(20),\n            major CHAR(20)\n            )\n        )\n    LOCATION ('major.txt') --filename\n)\nREJECT LIMIT UNLIMITED; --stop the process if error comes more than specified value.\n")),(0,r.kt)("h2",{id:"import-data-from-excel-to-oracle-using-sql-developer"},"Import data from Excel to Oracle using SQL Developer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Right click the table you want to insert data -> select import data -> select excel file -> click open")),(0,r.kt)("h2",{id:"xmlelement"},"XMLELEMENT"),(0,r.kt)("p",null,"The XMLELEMENT function is the basic unit for turning column data into XML fragments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SQL> SELECT XMLELEMENT("name", e.first_name) AS employee FROM HR.employees e\nWHERE e.employee_id = 160;\n--------------------------------------------------------------------------------\n<name>Louise</name>\n----\nSQL> SELECT XMLELEMENT("employee",\n        XMLELEMENT("employee_no", e.employee_id),\n        XMLELEMENT("name", e.first_name)\n        ) AS employee\n    FROM employees e\n    WHERE e.employee_id = 160;\n--------------------------------------------------------------------------------\n<employee><employee_no>160</employee_no><name>Louise</name></employee>\n----\nSQL> SELECT XMLELEMENT("employee",\n        XMLATTRIBUTES( --XMLATRIBUTES function converts column data into attributes of the parent element\n            e.employee_id AS "employee_id",\n            e.first_name AS "name")\n        ) AS employee\n    FROM employees e\n    WHERE e.employee_id = 160;\n--------------------------------------------------------------------------------\n<employee employee_id="160" name="Louise"></employee>\n----\nSQL> SELECT XMLELEMENT("employee",\n            XMLFOREST( --Like XMLATTRIBUTES, the XMLFOREST function allows you to process multiple columns at once.\n            e.employee_id AS "employee_id",\n            e.first_name AS "name")\n        ) AS employee\n    FROM employees e\n    WHERE e.employee_id = 160;\n--------------------------------------------------------------------------------\n<employee><employee_id>160</employee_id><name>Louise</name></employee>\n----\nSQL> SELECT XMLAGG( --XMLAGG function allows to aggregate separate fragments(multiple rows of data) into a single fragment\n        XMLELEMENT("emp",\n            XMLFOREST(\n            e.employee_id AS "empid",\n            e.first_name AS "name")\n        )\n    ) AS employees\n    FROM employees e\n    WHERE e.department_id = 50;\n-----------------------------------------------------------------\n<emp><empid>120</empid><name>Matthew</name></emp><emp><empid>121</empid><name>Adam</name></emp><emp><empid>122</empid><name>Payam</name></emp><emp><empid>123</empid><name>Shanta</name></emp><emp><empid>123</empid><name>Kevin</name></emp>\n')),(0,r.kt)("h2",{id:"sql-loader"},"SQL Loader"),(0,r.kt)("p",null,"SQL","*","Loader is a bulk loader utility used for moving data from external files into the Oracle database.\nSQL Loader Control File"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD DATA\nINFILE 'C:\\text_file.csv' --input file\nBADFILE 'C:\\textfile_bad.bad' --contains the records that are rejected by sql loader or oracle database becuase of invalid format. After a data is accepted by sql loader, it is sent to oracle database for insertion\nDISCARDFILE 'C:\\textfile_discard.dis' --records which are filtered out of the load because they don't meet the criteria specified in WHEN clause\nTRUNCATE INTO TABLE table_name --TRUNCATE to delete previous data in table\n--INSERT: Loads only if the target table is empty\n--APPEND: Loads rows if the target table is empty or not\n--REPLACE: First it delete the rows in the existing table and then loads the data\n--TRUNCATE: First it truncate the table and then loads the data\nWHEN OBJECT_TYPE <> 'INDEX' --i don't need any record with 'INDEX' in it\nFIELDS TERMINATED BY \",\" OPTIONALLY ENCLOSED BY \"#\" --delimited by , or #\nTRAILING NULL COLS --if the last column is empty, then treat this as NULL value; otherwise SQL Loader will treat this record as bad if the last column is empty\n(deptno, --column names in table\ndname,\njdate date'mm/dd/yyyy', --formating the date\nloc\"TRIM(:OBJECT_TYPE)\") --TRIM the white space if any\nor\n(deptno position(1:3), dname position(4:8), jdate position(9:18), loc position(19:22))\nor\n(deptno \"deptno+100\", --add 100 to the deptno\ndname \"upper(:dname)\", --upper case\njdate,\nloc \"decode(:loc,'Delhi','New Delhi',:loc)\")\nsqlldr control=C:\\textfile_control.ctl log=C:\\textfile_log.log --given the datafile in INFILE of control file\nor\nsqlldr datafile=C:\\text_file.csv control=C:\\textfile_control.ctl log=C:\\textfile_log.log\n")),(0,r.kt)("h2",{id:"local-screening"},"Local Screening"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If there are two variables with same name in the outer and inner block, and if we call the variable from inside the block, italways prefer the local (inner) variable. To refer to the outer variable, we need to use label.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"<<out_label>>\nDECLARE\n    x NUMBER := 100;\nBEGIN\n    FOR x IN 1..10 LOOP\n        DBMS_OUTPUT.PUT_LINE(out_label.x);\n    END LOOP;\nEND;\n")),(0,r.kt)("h2",{id:"wrapped"},"Wrapped"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Wrapping is the process of hiding PL/SQL source code."),(0,r.kt)("li",{parentName:"ul"},"Wrapping helps to protect your source code from business competitors and others who might misuse it."),(0,r.kt)("li",{parentName:"ul"},"Wrapped source files can be moved, backed up, and processed by SQL",(0,r.kt)("em",{parentName:"li"},"Plus and the Import and Export utilities, but they are not visible through the static data dictionary views "),"_","SOURCE."),(0,r.kt)("li",{parentName:"ul"},"You cannot edit PL/SQL source code inside wrapped files. Either wrap your code after it is ready to ship to users or include the wrapping operation as part of your build environment."),(0,r.kt)("li",{parentName:"ul"},"To change wrapped PL/SQL code, edit the original source file and then wrap it again."),(0,r.kt)("li",{parentName:"ul"},"Wrapping is not a secure method for hiding passwords or table names."),(0,r.kt)("li",{parentName:"ul"},"To hide the workings of a trigger, write a one-line trigger that invokes a wrapped subprogram."),(0,r.kt)("li",{parentName:"ul"},"Wrapping does not detect syntax or semantic errors."),(0,r.kt)("li",{parentName:"ul"},"Wrapped PL/SQL units are not downward-compatible.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CMD> wrap iname=\"wrap_test.sql\" --wrap_test.sql is the file name of a procedure (no space between the equal sign)\nPL/SQL Wrapper: Release 18.0.0.0.0 -Production on Thu Aug 1 16:26:09 2019\nVersion 18.3.0.0.0\nCopyright (c) 1982, 2018, Oracle and/or its affiliates. All rights reserved.\nProcessing wrap_test.sql to wrap_test.plb --output file\nSQL> @wrap_test.plb\nSQL> call wraptest();\n----\nDECLARE\n    PACKAGE_TEXT VARCHAR2(32767) := 'CREATE PACKAGE emp_actions AS\n    PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER);\n    PROCEDURE fire_employee (emp_id NUMBER);\nEND emp_actions;';\n\nBEGIN\n    DBMS_DDL.CREATE_WRAPPED(PACKAGE_TEXT);\nEND;\n")),(0,r.kt)("h2",{id:"high-water-mark"},"High Water Mark"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This is a term used with table segments stored in the database."),(0,r.kt)("li",{parentName:"ul"},"If you envision a table, for example, as a 'flat' structure or as a series of blocks laid one after the other in a line from left to right, the high-water mark (HWM) would be the rightmost block that ever contained data."),(0,r.kt)("li",{parentName:"ul"},"HWM starts at the first block of a newly created table. As data is placed into the table over time and more blocks get used, the HWM rises."),(0,r.kt)("li",{parentName:"ul"},"If we delete some (or even all) of the rows in the table, we might have many blocks that no longer contain data, but they are still under the HWM, and they will remain under the HWM until the object is rebuilt, truncated, or shrunk.")),(0,r.kt)("h2",{id:"dbms-packages"},"DBMS Packages"),(0,r.kt)("h3",{id:"dbms_sql"},"DBMS_SQL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The DBMS_SQL package provides an interface to use dynamic SQL to parse any data manipulation language (DML) or data definition language (DDL) statement using PL/SQL.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Native Dynamic SQL is an alternative to DBMS_SQL that lets you place dynamic SQL statements directly into PL/SQL blocks.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In most situations, Native Dynamic SQL is easier to use and performs better than ",(0,r.kt)("inlineCode",{parentName:"p"},"DBMS_SQL"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"However, Native Dynamic SQL itself has certain limitations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.NATIVE")," --Specifies normal behaviour for the database to which the program is connected. Can define behaviour as in Oracle version 6 and 7")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.OPEN_CURSOR"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.PARSE")," --Parsing the statement checks the statement's syntax and associates it with the cursor in your program. You can parse any DML or DDL statement. DDL statements are run on the parse, which performs the implied commit.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.BIND_VARIABLE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.DEFINE_COLUMN")," --The columns of the row being selected in a ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement are identified by their relative positions as they appear in the select list, from left to right")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.EXECUTE")," --Call the EXECUTE function to run your SQL statement.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.FETCH_ROWS")," --The ",(0,r.kt)("inlineCode",{parentName:"p"},"FETCH_ROWS")," function retrieves the rows that satisfy the query.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.COLUMN_VALUE")," --call ",(0,r.kt)("inlineCode",{parentName:"p"},"COLUMN_VALUE")," after fetching rows to actually retrieve the values of the columns in the rows into your program")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.VARIABLE_VALUE")," --call ",(0,r.kt)("inlineCode",{parentName:"p"},"VARIABLE_VALUE")," to retrieve the value of an OUT parameter for an anonymous block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_SQL.CLOSE_CURSOR")))),(0,r.kt)("h2",{id:"dbms_random"},"DBMS_RANDOM"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DBMS_RANDOM")," package provides a built-in random number generator. DBMS_RANDOM is not intended for cryptography.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_RANDOM.VALUE"),"(low_value,high_value) --gets a random number with 38 digit decimal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_RANDOM.STRING"),"(single_character,length) --This function gets a random string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_LOCK.SLEEP(120)")," --This procedure suspends the session for a given period of time (seconds).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_UTILITY.FORMAT_ERROR_BACKTRACE")," --This procedure displays the call stack at the point where an exception was raised")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_UTILITY.GET_TIME"),"\n-This function determines the current time in 100th's of a second."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This subprogram is primarily used for determining elapsed time."),(0,r.kt)("li",{parentName:"ul"},"The subprogram is called twice \u2013at the beginning and end of some process \u2013and then the first (earlier) number is subtracted from the second (later) number to determine the time elapsed."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_UTILITY.GET_CPU_TIME")," --CPU time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_OUTPUT.PUT_LINE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_OUTPUT.PUT_LINE($$PLSQL_LINE);")," --Displays line number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_OUTPUT.DISABLE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_STATS.GATHER_TABLE_STATS")," --This procedure gathers table and column (and index) statistics."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXEC DBMS_STATS.GATHER_SCHEMA_STATS(USER, CASCADE => TRUE);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_XPLAN.DISPLAY")," --to format and display the contents of a plan table.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_XPLAN.DISPLAY_AWR")," --to format and display the contents of the execution plan of a stored SQL statement in the AWR.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_XPLAN.DISPLAY_CURSOR")," --to format and display the contents of the execution plan of any loaded cursor.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_METADATA.GET_DDL")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DBMS_METADATA.GET_DDL ('TABLE', 'EMPLOYEES', 'HR') FROM DUAL;\n--to get DDL for a view just replace first argument with \u2018VIEW\u2019 and second with your view name and so.\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.ADD")," --Adds materialized views to a refresh group.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.MAKE")," --To make materialized view refresh group")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.CHANGE")," --Changes the refresh interval for a refresh group.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.DESTROY")," --Removes all of the materialized views from a refresh group and deletes the refresh group.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.REFRESH")," --Manually refreshes a refresh group.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_REFRESH.SUBTRACT")," --Removes materialized views from a refresh group.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_MVIEW.REFRESH")," --Refreshes one or more materialized views that are not members of the same refresh group")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"DBMS_MVIEW.REFRESH_ALL_MVIEWS")," --Refreshes all materialized views"))),(0,r.kt)("h2",{id:"table-clusters"},"Table Clusters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A table cluster is a group of tables that share common columns and store related data in the same blocks."),(0,r.kt)("li",{parentName:"ul"},"When tables are clustered, a single data block can contain rows from multiple tables. For example, a block can store rows from both the employees and departments tables rather than from only a single table."),(0,r.kt)("li",{parentName:"ul"},"The cluster key is the column or columns that the clustered tables have in common. For example, the employees and departments tables share the department_id column. You specify the cluster key when creating the table cluster and when creating every table added to the table cluster."),(0,r.kt)("li",{parentName:"ul"},"The cluster key value is the value of the cluster key columns for a particular set of rows. All data that contains the same cluster key value, such as department_id=20, is physically stored together."),(0,r.kt)("li",{parentName:"ul"},"Consider clustering tables when they are primarily queried (but not modified) and records from the tables are frequently queried together or joined. This benefits reduced Disk I/O for joins, improves access time for joins."),(0,r.kt)("li",{parentName:"ul"},"Flashback Table operation is not supported on clustered tables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"/*For example to create a cluster of EMP and DEPT tables in which the DEPTNO will be cluster key, first create the cluster by typing the following command.*/\nCREATE CLUSTER emp_dept (deptno NUMBER(2));\n\n/*Then create index on it.*/\nCREATE INDEX idx_empdept ON CLUSTER emp_dept;\n\n/*Now create table in the cluster like this*/\nCREATE TABLE dept (deptno NUMBER(2),\n    name VARCHAR2(20),\n    loc VARCHAR2(20))\n    CLUSTER emp_dept (deptno);\n    CREATE TABLE emp (empno NUMBER(5),\n    name VARCHAR2(20),\n    sal NUMBER(10,2),\n    deptno NUMBER(2))\n\nCLUSTER emp_dept (deptno);\n")),(0,r.kt)("h2",{id:"nocopy"},"NOCOPY"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By default OUT and IN OUT parameters are passed by value and IN parameters are passed by reference."),(0,r.kt)("li",{parentName:"ul"},"When an OUT or IN OUT parameter is modified inside the procedure the procedure actually only modifies a copy of the parameter value."),(0,r.kt)("li",{parentName:"ul"},"Only when the procedure has finished without exception is the result value copied back to the formal parameter."),(0,r.kt)("li",{parentName:"ul"},"Now, if you pass a large collection as an OUT or an IN OUT parameter then it will be passed by value, in other words the entire collection will be copied to the formal parameter when entering the procedure and back again when exiting the procedure."),(0,r.kt)("li",{parentName:"ul"},"If the collection is large this can lead to unnecessary CPU and memory consumption."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"NOCOPY")," hint alleviates this problem because you can use it to instruct the runtime engine to try to pass OUT or IN OUT parameters by reference instead of by value. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"PROCEDURE GET_CUSTOMER_ORDERS(\n    P_CUSTOMER_ID IN NUMBER,\n    P_ORDERS OUT NOCOPY ORDERS_COLL\n    );\n\nTHEORDERS ORDERS_COLL;\n\nGET_CUSTOMER_ORDERS(124, THEORDERS);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the absence of the NOCOPY hint the entire orders collection would have been copied into the orders variable upon exit from the procedure."),(0,r.kt)("li",{parentName:"ul"},"Instead the collection is now passed by reference."),(0,r.kt)("li",{parentName:"ul"},"Keep in mind, however, that there is a downside to using NOCOPY."),(0,r.kt)("li",{parentName:"ul"},"When you pass parameters to a procedure by reference then any modifications you perform on the parameters inside the procedure is done on the same memory location as the actual parameter, so the modifications are visible."),(0,r.kt)("li",{parentName:"ul"},"In other words, there is no way to ?undo? or ?rollback? these modifications, even when an exception is raised midway."),(0,r.kt)("li",{parentName:"ul"},"So if an exception is raised inside the procedure the value of the parameter is ?undefined? and cannot be trusted.")))}c.isMDXComponent=!0}}]);