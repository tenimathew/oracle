"use strict";(self.webpackChunkoracle=self.webpackChunkoracle||[]).push([[3224],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return E}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),E=r,N=d["".concat(s,".").concat(E)]||d[E]||u[E]||i;return n?a.createElement(N,l(l({ref:t},c),{},{components:n})):a.createElement(N,l({ref:t},c))}));function E(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1300:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return E},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"Section 3. Filtering data",sidebar_position:3,description:"DISTINCT, WHERE, FETCH, Operators, CASE"},s=void 0,p={unversionedId:"oracle-basics/Section 3. Filtering data",id:"oracle-basics/Section 3. Filtering data",title:"Section 3. Filtering data",description:"DISTINCT, WHERE, FETCH, Operators, CASE",source:"@site/docs/oracle-basics/filtering-data.md",sourceDirName:"oracle-basics",slug:"/oracle-basics/Section 3. Filtering data",permalink:"/oracle/oracle-basics/Section 3. Filtering data",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"Section 3. Filtering data",sidebar_position:3,description:"DISTINCT, WHERE, FETCH, Operators, CASE"},sidebar:"tutorialSidebar",previous:{title:"Section 2. Sorting data",permalink:"/oracle/oracle-basics/Section 2. Sorting data"},next:{title:"Section 4. Joining tables",permalink:"/oracle/oracle-basics/Section 4. Joining tables"}},c={},u=[{value:"DISTINCT",id:"distinct",level:2},{value:"Syntax",id:"syntax",level:3},{value:"WHERE",id:"where",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"FETCH",id:"fetch",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"OFFSET clause",id:"offset-clause",level:3},{value:"FETCH clause",id:"fetch-clause",level:3},{value:"ONLY | WITH TIES",id:"only--with-ties",level:3},{value:"Examples",id:"examples",level:3},{value:"Oracle Operators",id:"oracle-operators",level:2},{value:"LIKE wildcard Characters",id:"like-wildcard-characters",level:3},{value:"ESCAPE clause in LIKE",id:"escape-clause-in-like",level:3},{value:"CASE",id:"case",level:2},{value:"Simple CASE expression",id:"simple-case-expression",level:3},{value:"Searched CASE expression",id:"searched-case-expression",level:3},{value:"CASE expression in an ORDER BY clause",id:"case-expression-in-an-order-by-clause",level:4},{value:"CASE expression in a HAVING clause",id:"case-expression-in-a-having-clause",level:4},{value:"CASE expression in an UPDATE statement",id:"case-expression-in-an-update-statement",level:4}],d={toc:u};function E(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"distinct"},"DISTINCT"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DISTINCT")," clause is used in a ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement to filter duplicate rows in the result set. It ensures that rows returned are unique for the column or columns specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," clause."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DISTINCT")," treats ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," values to be duplicates of each other. If you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT DISTINCT")," statement to query data from a column that has many ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," values, the result set will include only one NULL value."),(0,i.kt)("h3",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT column_1\nFROM table_name;\n")),(0,i.kt)("h2",{id:"where"},"WHERE"),(0,i.kt)("h3",{id:"syntax-1"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_1\nFROM table_name\nWHERE search_condition;\n")),(0,i.kt)("p",null,"Besides the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," clause in the ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," statement to specify which rows to update or delete."),(0,i.kt)("h2",{id:"fetch"},"FETCH"),(0,i.kt)("p",null,"Some RDBMS such as MySQL and PostgreSQL have the ",(0,i.kt)("inlineCode",{parentName:"p"},"LIMIT")," clause that allows you to retrieve a portion of rows generated by a query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventorie INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nLIMIT 5;\n")),(0,i.kt)("p",null,"Oracle Database does not have the ",(0,i.kt)("inlineCode",{parentName:"p"},"LIMIT")," clause. However, since 12c release, it provided a similar but more flexible clause named row limiting clause."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventories INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nFETCH NEXT 5 ROWS ONLY;\n")),(0,i.kt)("h3",{id:"syntax-2"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"[OFFSET offset ROWS]\nFETCH  NEXT [row_count | percent PERCENT] ROWS  [ONLY | WITH TIES]\n")),(0,i.kt)("h3",{id:"offset-clause"},"OFFSET clause"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"OFFSET")," clause specifies the number of rows to skip before the row limiting starts."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"OFFSET")," clause is optional. If you skip it, then offset is 0 and row limiting starts with the first row"),(0,i.kt)("li",{parentName:"ul"},"If the offset is negative, then it is treated as 0."),(0,i.kt)("li",{parentName:"ul"},"If the offset is NULL or greater than the number of rows returned by the query, then no row is returned."),(0,i.kt)("li",{parentName:"ul"},"If the offset includes a fraction, then the fractional portion is truncated.")),(0,i.kt)("h3",{id:"fetch-clause"},"FETCH clause"),(0,i.kt)("p",null,"For the semantic clarity purpose, you can use the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"ROW")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ROWS"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"FIRST")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"NEXT")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"FETCH NEXT 1 ROWS\nFETCH FIRST 1 ROW\n")),(0,i.kt)("h3",{id:"only--with-ties"},"ONLY | WITH TIES"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"ONLY")," returns exactly the number of rows or percentage of rows"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WITH TIES")," returns additional rows with the same sort key as the last row fetched"),(0,i.kt)("li",{parentName:"ul"},"if you use ",(0,i.kt)("inlineCode",{parentName:"li"},"WITH TIES"),", you must specify an ",(0,i.kt)("inlineCode",{parentName:"li"},"ORDER BY")," clause in the query. If you don\u2019t, the query will not return the additional rows.")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventories INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nFETCH NEXT 10 ROWS ONLY;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventories INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nFETCH NEXT 10 ROWS WITH TIES;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventories INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nFETCH FIRST 5 PERCENT ROWS ONLY;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, quantity\nFROM inventories INNER JOIN products USING(product_id)\nORDER BY quantity DESC\nOFFSET 10 ROWS\nFETCH NEXT 10 ROWS ONLY;\n")),(0,i.kt)("h2",{id:"oracle-operators"},"Oracle Operators"),(0,i.kt)("p",null,"AND, OR, IN, NOT IN, BETWEEN, LIKE, NOT LIKE, IS NULL, IS NOT NULL"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"="),(0,i.kt)("td",{parentName:"tr",align:null},"Equality")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"!","=,<",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Inequality")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},">"),(0,i.kt)("td",{parentName:"tr",align:null},"Greater than")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"<"),(0,i.kt)("td",{parentName:"tr",align:null},"Less than")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},">","="),(0,i.kt)("td",{parentName:"tr",align:null},"Greater than or equal to")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"<="),(0,i.kt)("td",{parentName:"tr",align:null},"Less than or equal to")))),(0,i.kt)("h3",{id:"like-wildcard-characters"},"LIKE wildcard Characters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"%")," (percent) matches any string of zero or more character."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_")," (underscore) matches any single character.")),(0,i.kt)("h3",{id:"escape-clause-in-like"},"ESCAPE clause in LIKE"),(0,i.kt)("p",null,"To search for the string ",(0,i.kt)("inlineCode",{parentName:"p"},"25%"),", you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ESCAPE")," clause as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LIKE '%25!%%' ESCAPE '!'\n")),(0,i.kt)("p",null,"If you don\u2019t use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ESCAPE")," clause, Oracle will return any rows with the string ",(0,i.kt)("inlineCode",{parentName:"p"},"25"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE discounts\n  (\n    product_id NUMBER,\n    discount_message VARCHAR2( 255 ) NOT NULL,\n    PRIMARY KEY( product_id )\n  );\n\nINSERT INTO discounts(product_id, discount_message)\nVALUES(1,'Buy 1 and Get 25% OFF on 2nd ');\n\nINSERT INTO discounts(product_id, discount_message)\nVALUES(2,'Buy 2 and Get 50% OFF on 3rd ');\n\nINSERT INTO discounts(product_id, discount_message)\nVALUES(3,'Buy 3 Get 1 free');\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_id, discount_message\nFROM discounts\nWHERE discount_message LIKE '%25!%%' ESCAPE '!';\n")),(0,i.kt)("h2",{id:"case"},"CASE"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"CASE")," expression in statements such as ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE"),", and in clauses like ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"HAVING"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER BY"),"."),(0,i.kt)("h3",{id:"simple-case-expression"},"Simple CASE expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_id, company_name,\n    (CASE product_id\n        WHEN 'p1' THEN 'Cameras'\n        WHEN 'p2' THEN 'Mobiles'\n            ELSE 'Not available'\n    END) AS product\nFROM product;\n")),(0,i.kt)("h3",{id:"searched-case-expression"},"Searched CASE expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_id, company_name,\n    (CASE\n        WHEN product_id = 'p1' THEN 'Cameras'\n        WHEN product_id = 'p2' THEN 'Mobiles'\n        WHEN product_id = 'p3' AND company_name = 'Samsung' THEN 'TV'\n        ELSE 'Not available'\n    END) AS product\nFROM product;\n")),(0,i.kt)("h4",{id:"case-expression-in-an-order-by-clause"},"CASE expression in an ORDER BY clause"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM locations\nWHERE country_id in ('US','CA','UK')\nORDER BY country_id,\n  CASE country_id\n    WHEN 'US'\n    THEN state\n    ELSE city\n  END;\n")),(0,i.kt)("h4",{id:"case-expression-in-a-having-clause"},"CASE expression in a HAVING clause"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, category_id,\n   COUNT(product_id)\nFROM order_items\nINNER JOIN products USING (product_id)\nGROUP BY product_name, category_id\nHAVING\n    COUNT(CASE WHEN category_id = 1 THEN product_id ELSE NULL END ) > 5 OR\n    COUNT(CASE WHEN category_id = 2 THEN product_id ELSE NULL END) > 2\nORDER BY product_name;\n")),(0,i.kt)("h4",{id:"case-expression-in-an-update-statement"},"CASE expression in an UPDATE statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE products\nSET\n  list_price =\n  CASE\n    WHEN ROUND((list_price - standard_cost) * 100 / list_price,2) < 12\n    THEN (standard_cost  + 1) * 12\n  END\nWHERE\n  ROUND((list_price - standard_cost) * 100 / list_price,2) < 12;\n")))}E.isMDXComponent=!0}}]);