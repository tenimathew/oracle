"use strict";(self.webpackChunkoracle=self.webpackChunkoracle||[]).push([[276],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,N=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return n?o.createElement(N,r(r({ref:t},u),{},{components:n})):o.createElement(N,r({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<l;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6415:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var o=n(7462),a=n(3366),l=(n(7294),n(3905)),r=["components"],i={id:"Section 2. Conditional control",sidebar_position:2,description:"IF, CASE etc.."},s=void 0,c={unversionedId:"plsql-tutorial/Section 2. Conditional control",id:"plsql-tutorial/Section 2. Conditional control",title:"Section 2. Conditional control",description:"IF, CASE etc..",source:"@site/docs/plsql-tutorial/conditional_control.md",sourceDirName:"plsql-tutorial",slug:"/plsql-tutorial/Section 2. Conditional control",permalink:"/oracle/plsql-tutorial/Section 2. Conditional control",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"Section 2. Conditional control",sidebar_position:2,description:"IF, CASE etc.."},sidebar:"tutorialSidebar",previous:{title:"Section 1. PLSQL",permalink:"/oracle/plsql-tutorial/Section 1. PLSQL"},next:{title:"Section 3. Exception Handling",permalink:"/oracle/plsql-tutorial/Section 3. Exception Handling"}},u={},p=[{value:"Simple CASE",id:"simple-case",level:2},{value:"Searched CASE",id:"searched-case",level:2},{value:"IF statement",id:"if-statement",level:2},{value:"Cursor For Loop",id:"cursor-for-loop",level:2},{value:"Numeric For Loop",id:"numeric-for-loop",level:2},{value:"GOTO",id:"goto",level:2},{value:"NULL statement",id:"null-statement",level:2},{value:"While Loop",id:"while-loop",level:2},{value:"EXIT",id:"exit",level:2},{value:"EXIT WHEN",id:"exit-when",level:2},{value:"CONTINUE",id:"continue",level:2},{value:"CONTINUE WHEN",id:"continue-when",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"simple-case"},"Simple CASE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_id, company_name,\n    (CASE product_id\n    WHEN 'p1' THEN 'Cameras'\n    WHEN 'p2' THEN 'Mobiles'\n    ELSE 'Not available'\n    END) AS product\nFROM product;\n")),(0,l.kt)("h2",{id:"searched-case"},"Searched CASE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_id, company_name,\n    (CASE\n    WHEN product_id = 'p1' THEN 'Cameras'\n    WHEN product_id = 'p2' THEN 'Mobiles'\n    AND company_name = 'Samsung' THEN 'TV'\n    WHEN product_id = 'p3'\n    ELSE 'Not available'\n    END) AS product\nFROM product;\n")),(0,l.kt)("h2",{id:"if-statement"},"IF statement"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"IF condition THEN\n    --Statement1;\nELSIF condition THEN\n    --Statement2;\nELSE\n    --Statement3;\nEND IF;\n")),(0,l.kt)("h2",{id:"cursor-for-loop"},"Cursor For Loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FOR loop_counter IN cursor_name LOOP\n    --statement1;\nEND LOOP;\n")),(0,l.kt)("h2",{id:"numeric-for-loop"},"Numeric For Loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FOR loop_counter IN [REVERSE] lower_limit .. Upper_limit LOOP\n    --statement1;\nEND LOOP;\n")),(0,l.kt)("h2",{id:"goto"},"GOTO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement in PL/SQL programming language provides an unconditional jump from the GOTO to a labeled statement in the same subprogram.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    a NUMBER(2) := 10;\nBEGIN\n    <<LOOPSTART>>\n    WHILE a < 20 LOOP\n        DBMS_OUTPUT.PUT_LINE (a);\n        a := a + 1;\n        IF a = 15 THEN\n            a := a + 1;\n            GOTO LOOPSTART;\n        END IF;\n    END LOOP;\nEND;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You cannot use a ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement to transfer control into an ",(0,l.kt)("inlineCode",{parentName:"li"},"IF"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"CASE")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"LOOP")," statement, the same for sub-block."),(0,l.kt)("li",{parentName:"ul"},"The following example attempts to transfer control into an ",(0,l.kt)("inlineCode",{parentName:"li"},"IF")," statement using a ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n  n_sales NUMBER;\n  n_tax NUMBER;\nBEGIN\n    GOTO inside_if_statement;\n    IF n_sales > 0 THEN\n      <<inside_if_statement>>\n      n_tax  := n_sales * 0.1;\n    END IF;\nEND;\n-----\nPLS-00375: illegal GOTO statement; this GOTO cannot branch to label 'INSIDE_IF_STATEMENT'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You cannot use a ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement to transfer control from one clause to another in the IF statement e.g., from ",(0,l.kt)("inlineCode",{parentName:"li"},"IF")," clause to ELSIF or ELSE clause, or from one ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clause to another in the CASE statement."),(0,l.kt)("li",{parentName:"ul"},"The following example attempts to transfer control to a clause in the IF statement:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n  n_sales      NUMBER;\n  n_commission NUMBER;\nBEGIN\n  n_sales := 120000;\n  IF n_sales      > 100000 THEN\n    n_commission := 0.2;\n    GOTO zero_commission;\n  elsif n_sales   > 50000 THEN\n    n_commission := 0.15;\n  elsif n_sales   > 20000 THEN\n    n_commission := 0.1;\n  ELSE\n    <<zero_commission>>\n    n_commission := 0;\n  END IF;\nEND;\n-----\nPLS-00375: illegal GOTO statement; this GOTO cannot branch to label 'ZERO_COMMISSION'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You cannot use a ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement to transfer control out of a subprogram or into an exception handler."),(0,l.kt)("li",{parentName:"ul"},"You cannot use a ",(0,l.kt)("inlineCode",{parentName:"li"},"GOTO")," statement to transfer control from an exception handler back into the current block.")),(0,l.kt)("h2",{id:"null-statement"},"NULL statement"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The NULL statement is a ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," keyword followed by a semicolon ( ;). The NULL statement does nothing except that it passes control to the next statement.")),(0,l.kt)("h2",{id:"while-loop"},"While Loop"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Best usable when number of iterations to be performed are unknown"),(0,l.kt)("li",{parentName:"ul"},"Executes till the condition become FALSE")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WHILE condition LOOP\n    --statement1;\nEND LOOP;\n")),(0,l.kt)("h2",{id:"exit"},"EXIT"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When the ",(0,l.kt)("inlineCode",{parentName:"li"},"EXIT")," statement is encountered inside a loop, the loop is immediately terminated and the program control resumes at the next statement following the loop."),(0,l.kt)("li",{parentName:"ul"},"If you are using nested loops (i.e., one loop inside another loop), the ",(0,l.kt)("inlineCode",{parentName:"li"},"EXIT")," statement will stop the execution of the innermost loop and start executing the next line of code after the block.")),(0,l.kt)("h2",{id:"exit-when"},"EXIT WHEN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"EXIT WHEN condition;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"EXIT WHEN")," statement allows the condition in the ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clause to be evaluated. If the condition is true, the loop completes and control passes to the statement immediately after the ",(0,l.kt)("inlineCode",{parentName:"li"},"END LOOP"),".")),(0,l.kt)("h2",{id:"continue"},"CONTINUE"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"CONTINUE")," statement causes the loop to skip the remainder of its body and it forces the next iteration of the loop to take place.")),(0,l.kt)("h2",{id:"continue-when"},"CONTINUE WHEN"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"CONTINUE WHEN")," statement exits the current loop iteration based on a condition and immediately continue to the next iteration of that loop.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CONTINUE WHEN condition;\n")))}d.isMDXComponent=!0}}]);