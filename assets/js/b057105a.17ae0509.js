"use strict";(self.webpackChunkoracle=self.webpackChunkoracle||[]).push([[659],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2010:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={id:"Section 7. Set Operators",sidebar_position:7,description:"UNION, INTERSECT, MINUS"},c=void 0,l={unversionedId:"oracle-basics/Section 7. Set Operators",id:"oracle-basics/Section 7. Set Operators",title:"Section 7. Set Operators",description:"UNION, INTERSECT, MINUS",source:"@site/docs/oracle-basics/set-operators.md",sourceDirName:"oracle-basics",slug:"/oracle-basics/Section 7. Set Operators",permalink:"/oracle/oracle-basics/Section 7. Set Operators",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"Section 7. Set Operators",sidebar_position:7,description:"UNION, INTERSECT, MINUS"},sidebar:"tutorialSidebar",previous:{title:"Section 6. Subquery",permalink:"/oracle/oracle-basics/Section 6. Subquery"},next:{title:"Section 8. More on Groupings",permalink:"/oracle/oracle-basics/Section 8. More on Groupings"}},u={},p=[{value:"UNION",id:"union",level:2},{value:"Oracle UNION vs. JOIN",id:"oracle-union-vs-join",level:3},{value:"INTERSECT",id:"intersect",level:2},{value:"MINUS",id:"minus",level:2}],d={toc:p};function f(e){var t=e.components,s=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"union"},"UNION"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"UNION")," operator is a set operator that combines result sets of two or more ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statements into a single result set."),(0,i.kt)("p",null,"By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"UNION")," operator returns the unique rows from both result sets. If you want to retain the duplicate rows, you explicitly use ",(0,i.kt)("inlineCode",{parentName:"p"},"UNION ALL")),(0,i.kt)("h3",{id:"oracle-union-vs-join"},"Oracle UNION vs. JOIN"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"UNION")," places a result set on top another, meaning that it appends result sets vertically. However, a join such as ",(0,i.kt)("inlineCode",{parentName:"p"},"INNER JOIN")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"LEFT JOIN")," combines result sets horizontally."),(0,i.kt)("p",null,(0,i.kt)("img",{src:r(1413).Z,width:"600",height:"281"})),(0,i.kt)("h2",{id:"intersect"},"INTERSECT"),(0,i.kt)("p",null,"The Oracle ",(0,i.kt)("inlineCode",{parentName:"p"},"INTERSECT")," operator compares the result of two queries and returns the distinct rows that are output by both queries."),(0,i.kt)("p",null,(0,i.kt)("img",{src:r(4114).Z,width:"608",height:"181"})),(0,i.kt)("h2",{id:"minus"},"MINUS"),(0,i.kt)("p",null,"The Oracle ",(0,i.kt)("inlineCode",{parentName:"p"},"MINUS")," operator compares two queries and returns distinct rows from the first query that are not output by the second query. In other words, the ",(0,i.kt)("inlineCode",{parentName:"p"},"MINUS")," operator subtracts one result set from another."),(0,i.kt)("p",null,(0,i.kt)("img",{src:r(1225).Z,width:"615",height:"175"})))}f.isMDXComponent=!0},1413:function(e,t,r){t.Z=r.p+"assets/images/2022-05-30-22-27-14-7ce925bcc811edfd767d6860fcb139fd.png"},4114:function(e,t,r){t.Z=r.p+"assets/images/2022-05-30-22-28-15-629e15c03935bc0a46742c43f46f2349.png"},1225:function(e,t,r){t.Z=r.p+"assets/images/2022-05-30-22-29-10-3c11065ac3c8168d5342ce4d9adbf924.png"}}]);