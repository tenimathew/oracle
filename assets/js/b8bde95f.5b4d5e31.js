"use strict";(self.webpackChunkoracle=self.webpackChunkoracle||[]).push([[350],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return E}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),E=i,m=d["".concat(c,".").concat(E)]||d[E]||u[E]||a;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function E(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1132:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return E},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={id:"Section 3. Exception Handling",sidebar_position:3,description:"Exception Handling"},c=void 0,s={unversionedId:"plsql-tutorial/Section 3. Exception Handling",id:"plsql-tutorial/Section 3. Exception Handling",title:"Section 3. Exception Handling",description:"Exception Handling",source:"@site/docs/plsql-tutorial/exceptions.md",sourceDirName:"plsql-tutorial",slug:"/plsql-tutorial/Section 3. Exception Handling",permalink:"/oracle/plsql-tutorial/Section 3. Exception Handling",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"Section 3. Exception Handling",sidebar_position:3,description:"Exception Handling"},sidebar:"tutorialSidebar",previous:{title:"Section 2. Conditional control",permalink:"/oracle/plsql-tutorial/Section 2. Conditional control"},next:{title:"Section 4. Cursors",permalink:"/oracle/plsql-tutorial/Section 4. Cursors"}},p={},u=[{value:"Exception Handling",id:"exception-handling",level:2},{value:"Predefined Exceptions",id:"predefined-exceptions",level:2},{value:"Exception Declaration",id:"exception-declaration",level:2},{value:"RAISE_APPLICATION_ERROR",id:"raise_application_error",level:2},{value:"PRAGMA EXCEPTION_INIT",id:"pragma-exception_init",level:2},{value:"Reraising the current exception",id:"reraising-the-current-exception",level:2},{value:"Exception propagation",id:"exception-propagation",level:2},{value:"Autonomous transactions",id:"autonomous-transactions",level:2},{value:"Returning Clause",id:"returning-clause",level:2}],d={toc:u};function E(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"exception-handling"},"Exception Handling"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SQLCODE & SQLERRM are used for logging error"),(0,a.kt)("li",{parentName:"ul"},"If exception is fired, it cannot go back to executable section of current block and uncommitted changes are rolled back."),(0,a.kt)("li",{parentName:"ul"},"For user-defined exception, the default SQLCODE=1 and SQLERRM = \u2018User Defined Exception\u2019"),(0,a.kt)("li",{parentName:"ul"},"If there are no errors, SQLCODE = ORA-0000 and SQLERRM = \u2018Normal, Successful Completion\u2019")),(0,a.kt)("h2",{id:"predefined-exceptions"},"Predefined Exceptions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NO_DATA_FOUND"),"-It is raised when a SELECT INTO statement returns no rows.\n",(0,a.kt)("strong",{parentName:"p"},"PROGRAM_ERROR"),"-It is raised when PL/SQL has an internal problem.\n",(0,a.kt)("strong",{parentName:"p"},"TOO_MANY_ROWS"),"-It is raised when a SELECT INTO statement returns more than one row.\n",(0,a.kt)("strong",{parentName:"p"},"VALUE_ERROR"),"-It is raised when an arithmetic, conversion, truncation, or size constraint error occurs.\n",(0,a.kt)("strong",{parentName:"p"},"ZERO_DIVIDE"),"-It is raised when an attempt is made to divide a number by zero.\n",(0,a.kt)("strong",{parentName:"p"},"DUP_VAL_ON_INDEX"),"-Unique constraint error"),(0,a.kt)("h2",{id:"exception-declaration"},"Exception Declaration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An exception declaration declares a user-defined exception"),(0,a.kt)("li",{parentName:"ul"},"No error message or error code can be associated with this exception")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    exception_name EXCEPTION;\nBEGIN\n    IF condition THEN\n        RAISE exception_name;\n        --Executable statements;\n    END IF;\nEXCEPTION\n    WHEN exception_name THEN\n        --statement1;\n    WHEN OTHERS THEN\n        --statement2;\nEND;\n")),(0,a.kt)("h2",{id:"raise_application_error"},"RAISE_APPLICATION_ERROR"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Using this procedure, you can associate an error number (-20,000 to -20,999) with custom error message"),(0,a.kt)("li",{parentName:"ul"},"No exception name can be associated with this exception")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"raise_application_error(\n    error_number,\n    message\n    [, {TRUE | FALSE}]\n);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"ACCEPT var_age NUMBER PROMPT 'Enter your age:'; --(SQL* Plus function)Accept value from the user with custom message\n\nDECLARE\n    age NUMBER := &var_age;\nBEGIN\n    IF age < 18 THEN\n        RAISE_APPLICATION_ERROR (-20008, 'Age only above 18 are allowed');\n    END IF;\n\n    DBMS_OUTPUT.PUT_LINE('You are allowed');\nEXCEPTION\n    WHEN OTHERS THEN --No name available for the exception we raised\n        DBMS_OUTPUT.PUT_LINE(SQLERRM); --Error message of exception we raised\nEND;\n")),(0,a.kt)("h2",{id:"pragma-exception_init"},"PRAGMA EXCEPTION_INIT"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can associate an exception name with an Oracle error number."),(0,a.kt)("li",{parentName:"ul"},"It is not mandatory to use ",(0,a.kt)("inlineCode",{parentName:"li"},"PRAGMA EXCEPTION_INIT")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"RAISE_APPLICATION_ERROR")," procedure."),(0,a.kt)("li",{parentName:"ul"},"You can use ",(0,a.kt)("inlineCode",{parentName:"li"},"PRAGMA EXCEPTION_INIT")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"RAISE")," statement also.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    age NUMBER := 17;\n    ex_age EXCEPTION; --Declare exception name\n    PRAGMA EXCEPTION_INIT(ex_age,-20008) --(exception_name, error_number)\nBEGIN\n    IF age < 18 THEN\n        RAISE_APPLICATION_ERROR (-20008, 'Age only above 18 are allowed');\n    END IF;\n    DBMS_OUTPUT.PUT_LINE('You are allowed');\nEXCEPTION\n    WHEN ex_age THEN --Name is available because we are using PRAGMA EXCEPTION_INIT\n        DBMS_OUTPUT.PUT_LINE(SQLERRM);\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE(SQLERRM);\nEND;\n")),(0,a.kt)("h2",{id:"reraising-the-current-exception"},"Reraising the current exception"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can re-raise the current exception with the ",(0,a.kt)("inlineCode",{parentName:"li"},"RAISE")," statement. Reraising an exception passes it to the enclosing block, which later can be handled further. To reraise an exception, you don\u2019t need to specify the exception name.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    e_credit_too_high EXCEPTION;\n    PRAGMA exception_init( e_credit_too_high, -20001 );\n    l_max_credit customers.credit_limit%TYPE;\n    l_customer_id customers.customer_id%TYPE := &customer_id;\n    l_credit customers.credit_limit%TYPE     := &credit_limit;\nBEGIN\n    BEGIN\n        -- get the max credit limit\n        SELECT MAX(credit_limit)\n        INTO l_max_credit\n        FROM customers;\n\n        -- check if input credit is greater than the max credit\n        IF l_credit > l_max_credit THEN\n            RAISE e_credit_too_high;\n        END IF;\n        EXCEPTION\n            WHEN e_credit_too_high THEN\n                dbms_output.put_line('The credit is too high' || l_credit);\n                RAISE; -- reraise the exception\n    END;\nEXCEPTION\n    WHEN e_credit_too_high THEN\n        -- get average credit limit\n        SELECT avg(credit_limit)\n        into l_credit\n        from customers;\n\n        -- adjust the credit limit to the average\n        dbms_output.put_line('Adjusted credit to ' || l_credit);\n\n        --  update credit limit\n        UPDATE customers\n        SET credit_limit = l_credit\n        WHERE customer_id = l_customer_id;\n\n        COMMIT;\nEND;\n")),(0,a.kt)("h2",{id:"exception-propagation"},"Exception propagation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When an exception occurs, PL/SQL looks for an exception handler in the current block e.g., anonymous block, procedure, or function of the exception. If it does not find a match, PL/SQL propagates the exception to the enclosing block of the current block."),(0,a.kt)("li",{parentName:"ul"},"PL/SQL then attempts to handle the exception by raising it once more in the enclosing block. This process continues in each successive enclosing block until there is no remaining block in which to raise the exception.")),(0,a.kt)("h2",{id:"autonomous-transactions"},"Autonomous transactions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Autonomous transactions allow a single transaction to be subdivided into multiple commit/rollback transactions."),(0,a.kt)("li",{parentName:"ul"},"When an autonomous transaction is called, the original transaction (calling transaction) is temporarily suspended."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PRAGMA")," is used to provide an instruction to the compiler. Pragmas are defined in the declarative section in PL/SQL.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE OR REPLACE PROCEDURE log_errors(p_error_message IN VARCHAR2) IS\nPRAGMA AUTONOMOUS_TRANSACTION; --PRAGMA in the called program\nBEGIN\n    INSERT INTO error_logs VALUES(sysdate,p_error_message);\n    COMMIT; --Only above insert will be committed\nEND;\n----\nBEGIN\n    INSERT INTO..\nEXCEPTION\n    WHEN OTHERS THEN\n        log_errors('Error'); --Calling procedure; This will be committed\n        ROLLBACK;\nEND;\n")),(0,a.kt)("h2",{id:"returning-clause"},"Returning Clause"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Returning clause is used to return the new value after the update or insert or old value after delete."),(0,a.kt)("li",{parentName:"ul"},"It is recommended to use it with delete.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"DECLARE\n    dept_no dept.deptno %TYPE;\nBEGIN\n    INSERT INTO dept VALUES(70 ,'FOUR','FIVE')\n    RETURNING deptno INTO dept_no;\n    COMMIT;\n\n    DBMS_OUTPUT.PUT_LINE('Inserted:' || dept_no);\n    DELETE FROM dept WHERE dept_no = 70\n    RETURNING deptno INTO dept_no;\n    COMMIT;\n\n    DBMS_OUTPUT.PUT_LINE('Deleted:' || dept_no);\nEND;\n")))}E.isMDXComponent=!0}}]);